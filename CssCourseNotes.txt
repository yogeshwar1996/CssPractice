######################################
3 ways of adding styles to a HTML file
######################################
1. In the <head> section using <style> tag
--------------------------------------------
<head>
    <style>
        p //the css selector 
        {
            background: red; // the styling
        }
    </style>
</head>

2. inline styles
------------------
<p style="background: red"></p>

3. Using <link> to a css file
------------------------------
<head>
    <link rel="stylesheet" href="main.css">  
</head>

(main.css)
 p {
    background: red;
 }

###################
Adding google fonts
###################
Goto https://fonts.google.commonly
Select a desired font and Open the section that says `Get embeded code`.
Copy the lnks
and insert them in head section of your index.html


<html>
  <head>
    <title>Basic HTML File</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Anton&display=swap"
      rel="stylesheet"
    />
    //The google fonts to be linked before the css file
    <link rel="stylesheet" type="text/css" href="basic.css" />
  </head>
  <body>
    //Usage
    <h1 class="anton-regular">Welcome to my basic HTML file!</h1>
    <p>This is a simple HTML file created for practice.</p>
  </body>
</html>


##################
Types of selectors
##################

1. tag selector eg 

p {
    color: white
}

2. class selector

.white-text {
    color: white
}

3. Universal selector

* {
    color: white;
}

4, ID selector

#{
    color:red
}

5. attribute selector

[atribute]:    {
    color: red
}


Selector precedence
-------------------

If a style is defined on a tag as well as a class 
The class styles will override properties of the tag styles that are common
Example
<h1 class="red-color"> Happy Birthday </h1>

styles.css
h1 {
    text-decoration: underline;
    color: green;
}
.red-color {
    color: red;
}

Here h1 text will be underlined but color will be red


If there are two classes that have different values of same property then
the order of lasses will determine which one will actually have affect
one thats later in the file will have the precedence

Eg. 

<h1 class="red-color green-color">Happy Birthday</h1>

styles.css
.red-color {
    color: red;
}

.green-color {
    color: green;

}

Since h1 has both the classes and green-color class comes later it will have precedance.
and text color will be green.


Further more inline styles have highest priority
Eg.

<h1 class="red-color green-color" style="color: orange">Happy Birthday</h1>

The text will be colored orange


Order of precedance
inline styles > ID selectors > class, pseudo class, attribute selectors > tag > * 


Grouping selectors
------------------

In CSS, you can group selectors together to apply the same styles to multiple elements. This allows you to write more concise and maintainable styles. To group selectors, you separate them with commas. Here's the basic syntax:

css
Copy code
selector1, selector2, selector3 {
  /* Shared styles for selector1, selector2, and selector3 */
}


Example 
 p, .info, #special-text {
  font-family: 'Verdana', sans-serif;
  color: green;
}

<p> Some text </p> // Qualifies

<span> Some text </span> // Qualifies

<h1 id="special-text"> Some text </h1> // Qualifies


the css rules will apply to all that are either <p> tags or elements with 'info' class or elements with id 'special-text'

Compound Selector
-----------------

If you have a element which has multiple classes defined on it like
<p class="class1 class2"> Some text </p>

Then selector for such element will be 

.class1.class2 { 
    color: red
}

Note: the order of classes does not matter
######################

Cascading and Specificity

In Css there Cascading means multiple rules can apply to the same element
Specificity tells how to resolve conflicts arising from multiple rules


##########
Combinator
##########
If we want to apply a rule on h1 which is inside an element with id `section-title`
then we can write it as follows

<div id="section-title>
    ...
    <h1> </h1>
    ...
</div>

#section-title h1 {
    color: red
}


Understanding diffferent combinators
------------------------------------

Next Adjacent sibling 
----------------
h2 + p { 
    color: red;
}

example 
<div>
    <h2> Not applied </h2>
    <p> Applied</p>                     // applies to this one
    <h2> Not applied </h2>
    <h3> Not applied</h3>
    <p> Not applied</p>
    <h2> Not applied</h2>
    <p> Applied</p>                     // applies to this one
</div>

Next General sibling
---------------
h2 ~ p {
 color: red;
}
Example
<div>
    <h2> Not applied </h2>
    <p> Applied</p>                     // applies to this one
    <h2> Not applied </h2>
    <h3> Not applied</h3>
    <p> Applied</p>                     // applies to this one
    <h2> Not applied</h2>   
    <p> Applied</p>                     // applies to this one
</div>

Direct Child
------------
div > p {
    color: green;
}

Example 
<div>
    <div>not applied </div>
    <p> applied </p> 
    <div> not applied </div>
    <article>
        <p> not applied </p>
    </article>
    <p> applied </p>
</div>


Descendant 
----------
div p {
    color: red
}
Examples
<div>
    <div>not applied </div>
    <p> applied </p>             // applies to this one
    <div> not applied </div>
    <article>
        <p> applied </p>         // applies to this one
    </article>
    <p> applied </p>             // applies to this one
</div>


Note: 
Css combinator for all list items in an un-ordered list except the first one -

ol li:not(:first-child)  { 

}

#######################
Understanding box model
#######################
The outline of the element is called border, 
between border and next element we have margin
between border and content of element we have padding

+-------------------------------------+
|              Margin                 |
|                                     |
|  +-------------------------------+  |
|  |            Border             |  |
|  |                               |  |
|  |  +-------------------------+  |  |
|  |  |         Padding         |  |  |
|  |  |                         |  |  |
|  |  |  +-------------------+  |  |  |
|  |  |  |     Content       |  |  |  |
|  |  |  |                   |  |  |  |
|  |  |  +-------------------+  |  |  |
|  |  |                         |  |  |
|  |  +-------------------------+  |  |
|  |                               |  |
|  +-------------------------------+  |
|                                     |
+-------------------------------------+


Writting in shorthand
-------------------
Border properties like border-style border-color and border-width can be written in shorthand as follows
border: 2px solid red; 
border: solid 2px red; 
border: red 2px solid; 

The order does not matter
border-width: 2px 4px; // top and bottom is 2px while right and left is 4px
border-width: 2px 4px 6px 8px; // top right bottom left borders

Margin collapsing
------------------
It is relevant for block elements
Consider a list with some items and you have a css rule adding margin to each item in list
li { margin:20px; }
<ul>
    <li>One</li>
    <li>Two</li>
    <li>Three</li>
</ul>

When you will inspect the margins of each list item they will overlap, this is called margin collapsing
Between two elements one which has higher margin is the final margin between them

<ul>
    <li style="margin: 10px">One</li>
    <li style="margin: 20px">Two</li>
    <li style="margin-top: 8px">Three</li> //Here the 8px is collapsed into the 20px margin of above li
</ul>


Height and Width
----------------
When we set height and width for any element's content purely excluding the padding and border and margin
we set it as follows
{box-sizing: content-box, width: 100px, height: 100px}
Note: The default value of the box-sizing property in CSS is "content-box"

If you want to include the border and padding within the specified height and width then define it as follows
{box-sizing: border-box, width: 100px, height: 100px}
Note it still does not include the margin. Including margin in height and width is not allowed in css

#################################
Block and inline elements in HTML
#################################

In HTML, elements are categorized as either "block-level" or "inline" elements. 

Block-level elements
--------------------
These elements typically start on a new line and take up the full width of their container, stacking on top of each other. 
They are used to structure the content and create the main building blocks of a webpage. 
Here are some common block-level elements in HTML:

1. <div> A generic container that is often used to group other elements and apply styles or layout.

<div>
  <!-- Other block or inline elements go here -->
</div>


2. <p> Represents a paragraph of text.

<p>This is a paragraph.</p>

3. <h1> to <h6> Heading elements, with `<h1>` being the largest and `<h6>` being the smallest.


<h1>This is a heading level 1</h1>
<h2>This is a heading level 2</h2>
<h6>This is a heading level 6</h6>

4. <ul> Represents an unordered (bulleted) list.

<ul>
  <li>Item 1</li>
  <li>Item 2</li>
  <!-- ... -->
</ul>

5. <ol>  Represents an ordered (numbered) list.

<ol>
  <li>Item 1</li>
  <li>Item 2</li>
  <!-- ... -->
</ol>

6. <li> Represents a list item within `<ul>` or `<ol>`.

<ul>
  <li>Item 1</li>
  <li>Item 2</li>
</ul>

7. <blockquote> Represents a block of text that is a quotation from another source.

<blockquote>
  This is a blockquote.
</blockquote>

8. <table> Represents a table.

<table>
  <!-- Table content: <tr>, <td>, <th> go here -->
</table>

Other block elements include :
<header>

These are just a few examples of block-level elements. 
Each serves a specific purpose in structuring the content and layout of an HTML document. 
Block-level elements can contain other block-level or inline elements and are often used in 
combination to create the desired structure of a webpage.

Inline elements
---------------
In HTML, inline elements are those that do not start on a new line and only take up as much width as necessary.
They typically flow within the content, allowing multiple inline elements to appear side by side.
Here are some common inline elements in HTML:

1. <span> A generic container that does not add any visual change by default.

<span>This is an inline span element.</span>

2. <a> Represents a hyperlink, allowing you to create clickable links.

<a href="https://www.example.com">Visit Example.com</a>

3. <strong> Represents strong importance or emphasis, typically displayed as bold text.

<p>This is <strong>important</strong> text.</p>

4. <em> Represents emphasized text, typically displayed as italicized.

<p>This is <em>emphasized</em> text.</p>

5. <img> Represents an image.

<img src="image.jpg" alt="Description of the image">

6. <br> Represents a line break, forcing the content following it to appear on the next line.

<p>This is some text.<br> This is on a new line.</p>

7. <span> Used with inline styles or scripts to apply specific styles or behavior.

<p>This is <span style="color: red;">red</span> text.</p>

8. <abbr> Represents an abbreviation or acronym, providing additional information when hovered.

<p><abbr title="World Health Organization">WHO</abbr> is an important organization.</p>

9. <cite> Represents the title of a creative work, like the name of a book or movie.

<p><cite>The Great Gatsby</cite> is a classic novel.</p>

10. <code> Represents a fragment of code.

<p>This is an example of <code>inline code</code>.</p>

These are just a few examples of inline elements. 
Inline elements are often used within block-level elements to provide additional formatting or to convey specific meanings within the content. 
Unlike block-level elements, inline elements do not force a new line to start, and they only take up as much width as necessary.


Detailed comparison between block and inline elements
-----------------------------------------------------
Block-level and inline elements in HTML have different behaviors in terms of layout and presentation. Here's a comparison of the two:

Block-level elements:
^^^^^^^^^^^^^^^^^^^^

1. Start on a new line: Block-level elements typically start on a new line, stacking vertically on top of each other.
  
2. Full width: They take up the full available width of their container, extending from the left edge to the right edge.

3. Height: The height of a block-level element is determined by its content, or it can be explicitly set using the `height` property.

4. Can contain other elements: Block-level elements can contain other block-level and inline elements.

5. Examples: `<div>`, `<p>`, `<h1>` to `<h6>`, `<ul>`, `<ol>`, `<li>`, `<table>`, `<form>`, etc.

Inline elements:
^^^^^^^^^^^^^^^

1. Do not start on a new line: Inline elements do not start on a new line; they flow within the content, appearing on the same line as the surrounding text or elements.

2. Take up as much width as necessary: They only take up as much width as necessary to accommodate their content.
We cannot explicitly set width for them. It will not be respected.

3. Height: The height of an inline element is determined by the content, and you cannot explicitly set a height.

4. Cannot contain block-level elements: Inline elements cannot contain block-level elements but can contain other inline elements.

5. Vertical margins and padding and height properties do not affect inline elements due to the nature of how inline elements flow with content on a webpage. 
   Horizontal padding and margins are respected for inline elements, but widths are not, 
Note: When vertical paddings are given to inline element it creates an illusion of padding by adding a transparent layer around the element which can be seen by setting the background but it has no effect on the position of the element

6. Examples: `<span>`, `<a>`, `<strong>`, `<em>`, `<img>`, `<br>`, `<code>`, `<abbr>`, etc.

Usage:
^^^^^^
- Block-level elements are often used to create the overall structure of a webpage and group content into sections.
- Inline elements are typically used for small-scale styling, emphasizing text, creating links, or embedding images within a line of text.

Inline-block elements
---------------------

Similar to inline elements, inline-block elements do not start on a new line. 
They flow within the content, allowing multiple inline-block elements to appear side by side.
Similar to block-level elements, inline-block elements have a box model with properties like width, height, margin, padding, and border. 
This allows you to control the dimensions and spacing of the element.
You can set both width and height for inline-block elements, which is a characteristic not typically found in pure inline elements.
inline-block elements respect both horizontal and vertical margins and padding, allowing you to control the spacing around the element.
inline-block elements are aligned with the baseline of the surrounding text by default. This is similar to how inline elements are aligned.

################
Display property
################

It allows us to change the behavior of an element to block / inline / inline-block

display: none; //hides the element but remains in DOM
display: block;
display: inline-block;
display: inline;


display: none vs visibility: hidden

display:none; removes the element to which you apply it from the document flow. 
This means that the element is not visible and it also doesn't "block its position".

visibility: hidden;
If you only want to hide an element but you want to keep its place (i.e. other elements don't fill the empty spot), 

Note: In both the cases element is present in the DOM



############################################
General notes around css used in MM-FRONTEND
############################################
> body element
--------------
<body>s is also a block element with default margin of 8px;


> DSM classes for 100% width and height
-----------------------------------
width-100
height-100

> display property
------------------
block  - means one on top of the other
inline - all in one line
inline-block - like a block but all in one line

> styling router-link
---------------------
To remove underline, use text-decoration: auto

To style use router-link-active class
.router-link-active {
    color: var(--mm-color--p700);
}

> Defining variable in scss
----------------------------
$mm-section-width: 210px;

usage:
max-width: $mm-section-width;

> Defining variable in css
---------------------------

The variable name should start with `--` and to make it accessible throughout project it should be defined in :root
:root {
  --primary-color: #ff0000;
}
usage:
color: var(--primary-color);

> To prevent text from overflow the container
---------------------------------------------
overflow-wrap: break-word;


> Using line-height with display flex
-------------------------------------
https://www.perplexity.ai/search/line-height-in-.x0OuPrLQHGHkj_QEb2jYQ?s=c

line height is applied to the flex items within the flex container. 
The line-height property sets the height of a line box,
commonly used to set the distance between lines of text

> Using <p> vs <span>
----------------------
use p when you have multiple lines or you want to give vertical spacing between content
user span for inline purpose and unlike <p> it does not add vertical space by default 

> <img> object-fit
------------------
The object-fit property in CSS is used to specify how an img or video element should be resized to fit its container

> display flex and position absolute
--------------------------------------
when parent has {display: flex} and child has {position: absolute}
it allows the child to be positioned within the parent element using the top, right, bottom, and left properties


> Scss @extend
---------------
If you want to reuse some styles and dont want to repeat them
then define them once in a class and then use 

.newClass {
  @extend <className>
}

Example

// Define a base style
.base-style {
  color: blue;
  font-size: 16px;
}

// Extend the base style to another selector
.extended-style {
  @extend .base-style;
  font-weight: bold;
}

// Apply styles to elements using the extended style
.my-element {
  @extend .extended-style;
  border: 1px solid black;
}


> justify-content and align-items
---------------------------------
The justify-content and align-items properties are used in CSS flexbox to align items within a flex container

# justify-content
This property is used to align items along the main axis of the flex container.
For a flex container with a horizontal main axis, it will align the items horizontally. 
The values for justify-content include flex-start, flex-end, center, space-between, and space-around.

# align-items 
Unlike justify-content, the align-items property is used to align items on the cross axis of the flex container.
This means it controls the vertical alignment of items for a flex container with a horizontal main axis. 
The values for align-items include flex-start, flex-end, center, baseline, and stretch.
