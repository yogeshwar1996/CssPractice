3 ways of adding styles to a HTML file
######################################
1. In the <head> section using <style> tag

<head>
    <style>
        p //the css selector 
        {
            background: red; // the styling
        }
    </style>
</head>

2. inline styles

<p style="background: red"></p>

3. Using <link> to a css file

<head>
    <link rel="stylesheet" href="main.css">  
</head>

main.css
--------

 p {
    background: red;
 }

###################
Adding google fonts
###################
Goto https://fonts.google.commonly
Select a desired font and Open the section that says `Get embeded code`.
Copy the lnks
and insert them in head section of your index.html


<html>
  <head>
    <title>Basic HTML File</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Anton&display=swap"
      rel="stylesheet"
    />
    //The google fonts to be linked before the css file
    <link rel="stylesheet" type="text/css" href="basic.css" />
  </head>
  <body>
    //Usage
    <h1 class="anton-regular">Welcome to my basic HTML file!</h1>
    <p>This is a simple HTML file created for practice.</p>
  </body>
</html>


##################
Types of selectors
##################

1. tag selector eg 

p {
    color: white
}

2. class selector

.white-text {
    color: white
}

3. Universal selector

* {
    color: white;
}

4, ID selector

#{
    color:red
}

5. attribute selector

[atribute]:    {
    color: red
}


Selector precedence
-------------------

If a style is defined on a tag as well as a class 
The class styles will override properties of the tag styles that are common
Example
<h1 class="red-color"> Happy Birthday </h1>

styles.css
h1 {
    text-decoration: underline;
    color: green;
}
.red-color {
    color: red;
}

Here h1 text will be underlined but color will be red


If there are two classes that have different values of same property then
the order of lasses will determine which one will actually have affect
one thats later in the file will have the precedence

Eg. 

<h1 class="red-color green-color">Happy Birthday</h1>

styles.css
.red-color {
    color: red;
}

.green-color {
    color: green;

}

Since h1 has both the classes and green-color class comes later it will have precedance.
and text color will be green.


Further more inline styles have highest priority
Eg.

<h1 class="red-color green-color" style="color: orange">Happy Birthday</h1>

The text will be colored orange


Order of precedance
inline styles > ID selectors > class, pseudo class, attribute selectors > tag > * 

######################

Cascading and Specificity

In Css there Cascading means multiple rules can apply to the same element
Specificity tells how to resolve conflicts arising from multiple rules


##########
Combinator
##########
If we want to apply a rule on h1 which is inside an element with id `section-title`
then we can write it as follows

<div id="section-title>
    ...
    <h1> </h1>
    ...
</div>

#section-title h1 {
    color: red
}


Understanding diffferent combinators
------------------------------------

Next Adjacent sibling 
----------------
h2 + p { 
    color: red;
}

example 
<div>
    <h2> Not applied </h2>
    <p> Applied</p>                     // applies to this one
    <h2> Not applied </h2>
    <h3> Not applied</h3>
    <p> Not applied</p>
    <h2> Not applied</h2>
    <p> Applied</p>                     // applies to this one
</div>

Next General sibling
---------------
h2 ~ p {
 color: red;
}
Example
<div>
    <h2> Not applied </h2>
    <p> Applied</p>                     // applies to this one
    <h2> Not applied </h2>
    <h3> Not applied</h3>
    <p> Applied</p>                     // applies to this one
    <h2> Not applied</h2>   
    <p> Applied</p>                     // applies to this one
</div>

Direct Child
------------
div > p {
    color: green;
}

Example 
<div>
    <div>not applied </div>
    <p> applied </p> 
    <div> not applied </div>
    <article>
        <p> not applied </p>
    </article>
    <p> applied </p>
</div>


Descendant 
----------
div p {
    color: red
}
Examples
<div>
    <div>not applied </div>
    <p> applied </p>             // applies to this one
    <div> not applied </div>
    <article>
        <p> applied </p>         // applies to this one
    </article>
    <p> applied </p>             // applies to this one
</div>


Note: 
>>> Css combinator for all list items in an un-ordered list except the first one
ol li:not(:first-child)  { 
}