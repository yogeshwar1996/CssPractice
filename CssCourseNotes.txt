######################################
3 ways of adding styles to a HTML file
######################################
1. In the <head> section using <style> tag
--------------------------------------------
<head>
    <style>
        p //the css selector 
        {
            background: red; // the styling
        }
    </style>
</head>

2. inline styles
------------------
<p style="background: red"></p>

3. Using <link> to a css file
------------------------------
<head>
    <link rel="stylesheet" href="main.css">  
</head>

(main.css)
 p {
    background: red;
 }

 Note: if we have more than 1 stylesheet then order will affect how the styles of one file override other

 Eg 
  <link rel="stylesheet" href="shared.css" />
  <link rel="stylesheet" href="main.css" />
  
CSS in shared.css will be overwritten by main.css

###################
Adding google fonts
###################
Goto https://fonts.google.commonly
Select a desired font and Open the section that says `Get embeded code`.
Copy the lnks
and insert them in head section of your index.html


<html>
  <head>
    <title>Basic HTML File</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Anton&display=swap"
      rel="stylesheet"
    />
    //The google fonts to be linked before the css file
    <link rel="stylesheet" type="text/css" href="basic.css" />
  </head>
  <body>
    //Usage
    <h1 class="anton-regular">Welcome to my basic HTML file!</h1>
    <p>This is a simple HTML file created for practice.</p>
  </body>
</html>


##################
Types of selectors
##################

1. tag selector eg 

p {
    color: white
}

2. class selector

.white-text {
    color: white
}

3. Universal selector

* {
    color: white;
}

4, ID selector

#{
    color:red
}

5. attribute selector

[atribute]:    {
    color: red
}


Selector precedence
-------------------

If a style is defined on a tag as well as a class 
The class styles will override properties of the tag styles that are common
Example
<h1 class="red-color"> Happy Birthday </h1>

styles.css
h1 {
    text-decoration: underline;
    color: green;
}
.red-color {
    color: red;
}

Here h1 text will be underlined but color will be red


If there are two classes that have different values of same property then
the order of lasses will determine which one will actually have affect
one thats later in the file will have the precedence

Eg. 

<h1 class="red-color green-color">Happy Birthday</h1>

styles.css
.red-color {
    color: red;
}

.green-color {
    color: green;

}

Since h1 has both the classes and green-color class comes later it will have precedance.
and text color will be green.


Further more inline styles have highest priority
Eg.

<h1 class="red-color green-color" style="color: orange">Happy Birthday</h1>

The text will be colored orange


Order of precedance
inline styles > ID selectors > class, pseudo class, attribute selectors > tag > * 


Grouping selectors
------------------

In CSS, you can group selectors together to apply the same styles to multiple elements. This allows you to write more concise and maintainable styles. To group selectors, you separate them with commas. Here's the basic syntax:

css
Copy code
selector1, selector2, selector3 {
  /* Shared styles for selector1, selector2, and selector3 */
}


Example 
 p, .info, #special-text {
  font-family: 'Verdana', sans-serif;
  color: green;
}

<p> Some text </p> // Qualifies

<span> Some text </span> // Qualifies

<h1 id="special-text"> Some text </h1> // Qualifies


the css rules will apply to all that are either <p> tags or elements with 'info' class or elements with id 'special-text'

Compound Selector
-----------------

If you have a element which has multiple classes defined on it like
<p class="class1 class2"> Some text </p>

Then selector for such element will be 

.class1.class2 { 
    color: red
}

Note: the order of classes does not matter

Similarly if you have an element with a class you as follows
<p class="summary"> Hi </p>
<p> Hello </p>
<span class="summary"> Bye </span>

If you want to target only the paragaraph with summary class
p.summary {
  color: red;
}

Note: p.summary {} is different from p .summary {}
The former means p element that has a class summary
The latter means an element with summary class that is descendant of p tag


#####################
:not() and !important
#####################
To select all anchor tags that dont have "active" class
a:not(.active) {

}

To override a value forcefully

a {
  color: red !important;
}


using :not() and !important is discouraged former is a peformance bottleneck and latter is bad code design
######################

Cascading and Specificity

In Css there Cascading means multiple rules can apply to the same element
Specificity tells how to resolve conflicts arising from multiple rules


##########
Combinator
##########
If we want to apply a rule on h1 which is inside an element with id `section-title`
then we can write it as follows

<div id="section-title>
    ...
    <h1> </h1>
    ...
</div>

#section-title h1 {
    color: red
}


Understanding diffferent combinators
------------------------------------

Next Adjacent sibling 
----------------
h2 + p { 
    color: red;
}

example 
<div>
    <h2> Not applied </h2>
    <p> Applied</p>                     // applies to this one
    <h2> Not applied </h2>
    <h3> Not applied</h3>
    <p> Not applied</p>
    <h2> Not applied</h2>
    <p> Applied</p>                     // applies to this one
</div>

Next General sibling
---------------
h2 ~ p {
 color: red;
}
Example
<div>
    <h2> Not applied </h2>
    <p> Applied</p>                     // applies to this one
    <h2> Not applied </h2>
    <h3> Not applied</h3>
    <p> Applied</p>                     // applies to this one
    <h2> Not applied</h2>   
    <p> Applied</p>                     // applies to this one
</div>

Direct Child
------------
div > p {
    color: green;
}

Example 
<div>
    <div>not applied </div>
    <p> applied </p> 
    <div> not applied </div>
    <article>
        <p> not applied </p>
    </article>
    <p> applied </p>
</div>


Descendant 
----------
div p {
    color: red
}
Examples
<div>
    <div>not applied </div>
    <p> applied </p>             // applies to this one
    <div> not applied </div>
    <article>
        <p> applied </p>         // applies to this one
    </article>
    <p> applied </p>             // applies to this one
</div>


Note: 
Css combinator for all list items in an un-ordered list except the first one -

ol li:not(:first-child)  { 

}

#######################
Understanding box model
#######################

The outline of the element is called border, 
between border and next element we have margin
between border and content of element we have padding

+-------------------------------------+
|              Margin                 |
|                                     |
|  +-------------------------------+  |
|  |            Border             |  |
|  |                               |  |
|  |  +-------------------------+  |  |
|  |  |         Padding         |  |  |
|  |  |                         |  |  |
|  |  |  +-------------------+  |  |  |
|  |  |  |     Content       |  |  |  |
|  |  |  |                   |  |  |  |
|  |  |  +-------------------+  |  |  |
|  |  |                         |  |  |
|  |  +-------------------------+  |  |
|  |                               |  |
|  +-------------------------------+  |
|                                     |
+-------------------------------------+


Writting in shorthand
-------------------
Border properties like border-style border-color and border-width can be written in shorthand as follows
border: 2px solid red; 
border: solid 2px red; 
border: red 2px solid; 

The order does not matter
border-width: 2px 4px; // top and bottom is 2px while right and left is 4px
border-width: 2px 4px 6px 8px; // top right bottom left borders

Margin collapsing
------------------
It is relevant for block elements
Consider a list with some items and you have a css rule adding margin to each item in list
li { margin:20px; }
<ul>
    <li>One</li>
    <li>Two</li>
    <li>Three</li>
</ul>

When you will inspect the margins of each list item they will overlap, this is called margin collapsing
Between two elements one which has higher margin is the final margin between them

<ul>
    <li style="margin: 10px">One</li>
    <li style="margin: 20px">Two</li>
    <li style="margin-top: 8spx">Three</li> //Here the 8px is collapsed into the 20px margin of above li
</ul>

Note: margin: auto;  sets equal margins on both sides of the block element making it look like horizontally in the center
Height and Width
----------------
When we set height and width for any element's content purely excluding the padding and border and margin
we set it as follows
{box-sizing: content-box, width: 100px, height: 100px}
Note: The default value of the box-sizing property in CSS is "content-box"

If you want to include the border and padding within the specified height and width then define it as follows
{box-sizing: border-box, width: 100px, height: 100px}
Note it still does not include the margin. Including margin in height and width is not allowed in css

#################################
Block and inline elements in HTML
#################################

In HTML, elements are categorized as either "block-level" or "inline" elements. 

Block-level elements
--------------------
These elements typically start on a new line and take up the full width of their container, stacking on top of each other. 
They are used to structure the content and create the main building blocks of a webpage. 
Here are some common block-level elements in HTML:

1. <div> A generic container that is often used to group other elements and apply styles or layout.

<div>
  <!-- Other block or inline elements go here -->
</div>


2. <p> Represents a paragraph of text.

<p>This is a paragraph.</p>

3. <h1> to <h6> Heading elements, with `<h1>` being the largest and `<h6>` being the smallest.


<h1>This is a heading level 1</h1>
<h2>This is a heading level 2</h2>
<h6>This is a heading level 6</h6>

4. <ul> Represents an unordered (bulleted) list.

<ul>
  <li>Item 1</li>
  <li>Item 2</li>
  <!-- ... -->
</ul>

5. <ol>  Represents an ordered (numbered) list.

<ol>
  <li>Item 1</li>
  <li>Item 2</li>
  <!-- ... -->
</ol>

6. <li> Represents a list item within `<ul>` or `<ol>`.

<ul>
  <li>Item 1</li>
  <li>Item 2</li>
</ul>

7. <blockquote> Represents a block of text that is a quotation from another source.

<blockquote>
  This is a blockquote.
</blockquote>

8. <table> Represents a table.

<table>
  <!-- Table content: <tr>, <td>, <th> go here -->
</table>

Other block elements include :
<header>

These are just a few examples of block-level elements. 
Each serves a specific purpose in structuring the content and layout of an HTML document. 
Block-level elements can contain other block-level or inline elements and are often used in 
combination to create the desired structure of a webpage.

Inline elements
---------------
In HTML, inline elements are those that do not start on a new line and only take up as much width as necessary.
They typically flow within the content, allowing multiple inline elements to appear side by side.
Here are some common inline elements in HTML:

1. <span> A generic container that does not add any visual change by default.

<span>This is an inline span element.</span>

2. <a> Represents a hyperlink, allowing you to create clickable links.

<a href="https://www.example.com">Visit Example.com</a>

3. <strong> Represents strong importance or emphasis, typically displayed as bold text.

<p>This is <strong>important</strong> text.</p>

4. <em> Represents emphasized text, typically displayed as italicized.

<p>This is <em>emphasized</em> text.</p>

5. <img> Represents an image.

<img src="image.jpg" alt="Description of the image">

6. <br> Represents a line break, forcing the content following it to appear on the next line.

<p>This is some text.<br> This is on a new line.</p>

7. <span> Used with inline styles or scripts to apply specific styles or behavior.

<p>This is <span style="color: red;">red</span> text.</p>

8. <abbr> Represents an abbreviation or acronym, providing additional information when hovered.

<p><abbr title="World Health Organization">WHO</abbr> is an important organization.</p>

9. <cite> Represents the title of a creative work, like the name of a book or movie.

<p><cite>The Great Gatsby</cite> is a classic novel.</p>

10. <code> Represents a fragment of code.

<p>This is an example of <code>inline code</code>.</p>

These are just a few examples of inline elements. 
Inline elements are often used within block-level elements to provide additional formatting or to convey specific meanings within the content. 
Unlike block-level elements, inline elements do not force a new line to start, and they only take up as much width as necessary.


Detailed comparison between block and inline elements
-----------------------------------------------------
Block-level and inline elements in HTML have different behaviors in terms of layout and presentation. Here's a comparison of the two:

Block-level elements:
^^^^^^^^^^^^^^^^^^^^

1. Start on a new line: Block-level elements typically start on a new line, stacking vertically on top of each other.
  
2. Full width: They take up the full available width of their container, extending from the left edge to the right edge.

3. Height: The height of a block-level element is determined by its content, or it can be explicitly set using the `height` property.

4. Can contain other elements: Block-level elements can contain other block-level and inline elements.

5. Examples: `<div>`, `<p>`, `<h1>` to `<h6>`, `<ul>`, `<ol>`, `<li>`, `<table>`, `<form>`, etc.

Inline elements:
^^^^^^^^^^^^^^^

1. Do not start on a new line: Inline elements do not start on a new line; they flow within the content, appearing on the same line as the surrounding text or elements.

2. Take up as much width as necessary: They only take up as much width as necessary to accommodate their content.
We cannot explicitly set width for them. It will not be respected.

3. Height: The height of an inline element is determined by the content, and you cannot explicitly set a height.

4. Cannot contain block-level elements: Inline elements cannot contain block-level elements but can contain other inline elements.

5. Vertical margins and padding and height properties do not affect inline elements due to the nature of how inline elements flow with content on a webpage. 
   Horizontal padding and margins are respected for inline elements, but widths are not, 
Note: When vertical paddings are given to inline element it creates an illusion of padding by adding a transparent layer around the element which can be seen by setting the background but it has no effect on the position of the element

6. Examples: `<span>`, `<a>`, `<strong>`, `<em>`, `<img>`, `<br>`, `<code>`, `<abbr>`, etc.

Usage:
^^^^^^
- Block-level elements are often used to create the overall structure of a webpage and group content into sections.
- Inline elements are typically used for small-scale styling, emphasizing text, creating links, or embedding images within a line of text.

Inline-block elements
---------------------

Similar to inline elements, inline-block elements do not start on a new line. 
They flow within the content, allowing multiple inline-block elements to appear side by side.
Similar to block-level elements, inline-block elements have a box model with properties like width, height, margin, padding, and border. 
This allows you to control the dimensions and spacing of the element.
You can set both width and height for inline-block elements, which is a characteristic not typically found in pure inline elements.
inline-block elements respect both horizontal and vertical margins and padding, allowing you to control the spacing around the element.
inline-block elements are aligned with the baseline of the surrounding text by default. This is similar to how inline elements are aligned.
By default inline-block elements take up only as much width as its content require but we can explicitly set a width for it and its respected.

################
Display property
################

It allows us to change the behavior of an element to block / inline / inline-block

display: none; //hides the element but remains in DOM
display: block;
display: inline-block;
display: inline;


display: none vs visibility: hidden

display:none; removes the element to which you apply it from the document flow. 
This means that the element is not visible and it also doesn't "block its position".

visibility: hidden;
If you only want to hide an element but you want to keep its place (i.e. other elements don't fill the empty spot), 

Note: In both the cases element is present in the DOM


####################
Color and background
####################

color: red // to set color for the text
background: url('image.png') // to set a background image
background-color: white; // to set background's color

#########
Alignment
#########

To vertically align the content of the block element add equal amount of top and bottom padding

vertical-alignment: baseline/top/middle/bottom
-----------------------------------------------
The vertical-align CSS property sets vertical alignment of an inline, inline-block element inside its containing box
Note: you can't use it to vertically align block-level elements.

text-align: start/center/end/justify
-------------------------------------
Sets the horizontal alignment of the content

justify-content and align-items
===============================
The justify-content and align-items properties are used in CSS flexbox to align items within a flex container

justify-content / justify-items
-------------------------------------
This property is used to align content/item horizontally inside flex container.
start => left
center
end => right
space-between
space-around
stretch

 align-content / align-items
------------------------------ 
It is used to align items vertically inside the flex container.
start => top
center
end => bottom
space-between
space-around 
stretch

float & clear
-------------
https://developer.mozilla.org/en-US/docs/Web/CSS/float

The float CSS property places an element on the left or right side of its container,
allowing text and inline elements to wrap around it

float: left/right;

Note: Float takes the element out of the document flow hence and the text from the next block level elements start floating around it
If you want the elements space to be reserved and no of text around it you can set clear property on the next element and assign the value "both"

clear: both;
Eg
<div> Hello </div>
<div style="float: right"> HI </div>
<div style="clear: both"> Bye </div>

########
Shadows
########

box-shadow: 1px 1px 5px 5px rgba(0,0,0,0.5);

Adds shadow effects around an element. 
A box shadow is described as follows
1st param is X offsets 
2nd param is Y offsets
3rd param is blur-radius
4th param is spread-radius

######################
Positioning an element
######################

Allowed values: static/fixed/relative/absolute/sticky

`position` property can be applied to both block level and inline elements

> static - default value, follows the normal document flow, elements appear in the order they are present in DOM

> fixed - element is removed from the normal document flow, 
 and no space is created for the element in the page layout
 and gets attached to viewport.
 When we scroll on the page the element will always be visible.

> absolute - the element is position absolutely to its ancestor, which has position other than static

> relative - The element is positioned according to the normal flow of the document, 
and then offset relative to itself based on the values of top, right, bottom, and left
Note: With this property and setting top/bottom/left/right element
may go out of the container and to hide it we can set the property overflow: hidden
But if we set this property on <body> it passes it to <html> so when we need it on <body> ensure its on both <body> and <html>

> sticky - element is sticks to the nearest ancestor which has scroll untill the border of the last element of the container is reached. 
Note: for this we additionally need to mention property `top`  and its value will tell how far from the top of the scrolling ancestor the element should stick


> Top/Bottom/Left/Right - We can move element in these directions only when position is something other that default value of static
It can be fixed/relative/absolute/sticky

Note: 3 Rules
1. When position:fixed, the containing element is viewport
2 When position:absolute, the containing element is an ancestor element which has position other than static. 
  Here we consider both the content and padding of the containing element
3. When position: either static or relative, the containing element is the content of the nearest block level ancestor


Note: when we have following scenario

<body>
<div class="backdrop"></div>
<p>
This is interesting.
</p>
</body>

.backdrop {
  position: relative;
  width: 100%;
  height: 100%;
}

The div now has body as nearest block level ancestor,
The div takes the full width of the containing element but the height is 0 
because the height of the body element is not a single value it is the height of its contents.

Solution1: To fix this we can set height 100% to body as well as html elements
.html {
  height: 100%
}
.body {
  height: 100%
}
.backdrop {
  position: relative;
  z-index:100;
  width: 100%;
  height: 100%;
}
Now it should work fine and backdrop element should have a height now.

Solution2: We can set position absolute for the back-drop element
.backdrop {
  position: absolute;
  top: 0;
  left: 0;
  z-index:100;
  width: 100%
  height: 100%
}

Solution3: We can set position to fixed
.backdrop {
  position: fixed;
  top: 0;
  left: 0;
  z-index:100;
  width: 100%
  height: 100%
}

z-index
========

Lets say we want to add background, we can add it to body because its the container and will cover all the divs
It will be simplest to do so as well

<body class="background">
  <div></div>
  <div></div>
  <div></div>
</body>

.background {
  background: ('image.jpg')
}

Now assume we add a another div and then add a background to its for all the other divs then we need 
to set its position as fixed so that it comes out of the document flow and gets attched to the view port
and we need to give a z-index: -1 so it shows in the back

<body>
  <div class="background">
  <div></div>
  <div></div>
  <div></div>
</body>

.background {
  background: ('image.jpg')
  position: fixed;
  z-index: -1;
}

Notes
* z-index only works in context of the container element.
 i.e we can tell which element among the siblings will come on top or bottom
* z-index only works with elements with position other than static
* If two elements have same z-index then their order in DOM will determines
  which will show on top, element which comes later in DOM will appear on top

Example

<body>
 <div class="one"> First </div>
 <div clas="two"> 
    <div>Second A </div>
    <div>Second B </div>
    <div>Second C </div>
 </div>
 <div class="three"> Third </div>

When position is set fixed for classes "one", "two", "three"
The corsp divs go out of the document flow and stack on each other in the order they appear in DOM
i.e "three" on top of "two" which is on top of "one"

Note the divs initially stack at the  point in their containers where content starts after padding 
Now we can move them by setting top as 10px, 20px, 30px on classes "one", "two", "three" respectively

Note these value are not relative to the container but the view port.
So the divs will move 10px 20px 30px from top of the view port

Note: These div now behave line inline-block eleemnt and we can set widths on them.

We can control which div will appears on top among classes  "one", "two", "three" using z-index

Now lets set positions of children of second div as fixed.
Again the child divs initially stack at the  point in "Second" div where content starts after padding 
Again these divs now behave line inline-block eleemnt and we can set widths on them.
We can move them by setting top as 10px, 20px, 30px on classes "one", "two", "three" respectively
and this movement will be relative to the viewport

Important Note: The the z-index value of child elements of Second div can be used to control how they appear on top of each other
But no matter how big z-index you give them they will not show on top of div's 'One' and 'Three' and nor will they go behind the div 'Two'


################
Background sizes
################

Note we usually give background property but we can give specific properties also like
background-image, background-size, background-color etc

Note: If we define both background-color and background-image then the image will display

background-size: 100px; 
This will show many images with width 100.The height of image is automatically selected to maintain the aspect ratio

background-size: 100px 200px; // will set width to 100px and height to 200px 

We can also set values in %
background-size: 50%; // will set width to 50% of the container width maintaining the aspect ratio

Case: If you want to set to the height without distorting the aspect ratio you can set width to auto
background-size: auto 100%; // will set height to 100% of container's height and width will be such that aspect ratio is maintained.

Case: if you want the image to cover the entire available container space
background-size: cover; 
Explanation : Will cover or fill the entire contianer space, maintain the aspect ratio but may crop the image vertically or horizontally
It will set width to 100% in landscape mode and and then adjust the height to maintain aspect ratio
It will set height to 100% in potrait mode and and then adjust the width to maintain aspect ratio

Case: if you want the enitre image to show in the container without cropping or stretching not necessarily filling the entire container space (ie can leave empty space also)
background-size: contain; 

Default case: When you want to show the original image as is, in its original height, width and aspect ratio.
background-size: auto; 


#################
Background repeat
#################
Case: To controll the repeat behaviour we have
background-repeat: no-repeat;// to show only 1 image and disable repitition
background-repeat: repeat-x; // to repeat the image only in the x-axis
background-repeat: repeat-y; // to repeat the image only in the y-axis


###################
Background position
###################
Case: To control the position of background we have position (https://developer.mozilla.org/en-US/docs/Web/CSS/background-position)
background-position: 20px; // This means push the image 20px to right on x-axis inside the container 
background-position: 20px 20px; // This means push the image 20px to right on x-axis and 20px to bottom on the y-axis inside the container 

Note: we can give values in px as well as %
background-position: 20% 40%; //means pull the image to left by 20% on x-axis and pull the image to top by 40% on y-axis

#####################
Background attachment
#####################
Case: To fixate the background so that the content scrolls on top of it
background-attachment: fix;

#################
Background Origin
#################

Just like box model, where we have box-sizing property, for the background, we have `background-origin` property.
Allowed values: padding-box/border-box/content-box

background-origin: border-box; // the background starts from the border
background-origin: padding-box; // the background starts from the padding
background-origin: content-box; // the background starts from the content

###############
Background Clip
###############

`background-clip` property sets whether an element's background extends underneath its border box, padding box, content box or text

Usage:
background-clip: border-box;
background-clip: padding-box;
background-clip: content-box;
background-clip: text; // Useful, when we have text with big font and transparent color like - "font-size: 52px;font-weight: 700;color: transparent;"

Note: If both background-origin and background-clip are defined, background-clip overrides the styling


############### 
Styling images

When we add an image inside a container element then by default the height and width of image is used,
and the height and width of container is not respected.

>> To make image respect the size of the container element, ensure the container element's display property is set to 
block or inline-block

<span classs="image-container">
  <img src='image.png'/>
</span>

.image-container {
  display: inline-block
  height: 50px;
  width: 50px;
}
.image-container > img {
  height: 100%
}

Note: all the stylings we do on background images like background-size, background-position etc
They are not available for images in general.

>> To show the image in circle shape
img {
  border-radius: 50%  
}

>> If you want an image to scale down if it has to, but never scale up to be larger than its original size, add the following:
img {
  max-width: 100%;
  height: auto;
}

>> To add transparency to image use opacity
img {
  opacity: 0.5;
}

>> To position some text on the image (https://www.w3schools.com/css/css3_images.asp)

<div class="container">
  <img src="img_5terre_wide.jpg" alt="Cinque Terre" width="1000" height="300">
  <div class="center">Centered</div>
</div>

.container {
  position: relative;
}

.center {
  position: absolute;
  top: 50%;
  left: 50%;
  font-size: 18px;
  transform: translate(-50%, -50%);
  /*NOTE: When you specify -50% for both horizontal and vertical translations,
   it means the element will be moved halfway in both directions.
   This effectively centers the element both horizontally and vertically within its containing element
   or relative to its parent.*/
}

img { 
  width: 100%;
  height: auto;
  opacity: 0.3;
}

>> To create an overlay effect on hover

<div class="container">
  <img src="img_avatar.png" alt="Avatar" class="image">
  <div class="overlay">
    <div class="text">Hello World</div>
  </div>
</div>

.container {
  position: relative;
  width: 50%
}

.image {
  display: block;
  width: 100%;
  height: auto;
}

.overlay {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  height: 100%;
  width: 100%;
  opacity: 0;
  transition: .5s ease;
  background-color: #008CBA;
}

.container:hover .overlay {
  opacity: 1;
}

.text {
  color: white;
  font-size: 20px;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  -ms-transform: translate(-50%, -50%);
}
 

 >> To flip an image
 img:hover {
  transform: scaleX(-1);
}


###########################
Gradients (Linear, Radiant)

These can be set in the background-image property, like
background-image: linear-gradient(direction, Color 1, Color 2, transparent, ...,Color N)

The linear-gradient goes from one edge to another one
Note: transparent is useful if you want to show fading effect or if you have multiple backgrounds
Note: each color is given equal space
Note: direction can be one of (to bottom, to left bottom, 30deg, 0deg) etc
Note: we can mention the space a color should occupy as follows
background-image: linear-gradient(to bottom, red 70%, blue 30%)

The radial-gradient starts with a certain shape and then transitions to the surrounding area
Default shape is an ellipse, positioned in the center of the container.
Usage: 
background-image: radial-gradient(value, color 1, color 2,..., color n)
value can be a 
 - shape, like one of (circle, ellipse)
 - shape with position, like one of (circle at top left, circle at bottom right, circle at 20% 50%, circle at 20px, 50px)
 - shape with size and position, like one of (circle 20px at 20% 50%, ellipse 40px 100px at 20% 50%)
 - shape with reference, like one of (ellipse farthest-side at 20px 100px, ellipse farthest-corner at 20px 100px
 )
https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/radial-gradient


####################
Multiple backgrounds

we can define multiple background images (which can be actual images or gradients), 
but we can have only one background color

Example:
background-image: linear-gradient(to bottom, transparent 80%, #f43400d9), url("./images/freedom.jpg");

#######
Filters
The filter CSS property applies graphical effects like blur or color shift to an element.
Filters are commonly used to adjust the rendering of images, backgrounds, and borders.

Some examples - 
filter: blur(5px);
filter: brightness(0.4);
filter: contrast(200%);

One can also apply multiple filters like - filter: contrast(175%) brightness(3%);
More on filters => https://developer.mozilla.org/en-US/docs/Web/CSS/filter

###################
Knowing about units

px - for absolute values
rem, em - for font size
% -for adusting wrt container element
vh,vw - for adjusting wrt viewport

##########
em and rem

Consider this example
.body {
  font-size: 16px;
}
<body>
<h1> Hello </h1>
</body>

When you inspect the h1 tag in browser console it will show font size as 2em and when you go the computed styles
It will be 32px ie 2 * 16px

If we increase the font-size of body to 20px; then the computed font-size of h1 will become 2 * 20px ie 40px

Font-size of the element defined as 2em means 2 times the actual-font size of the elment which is further inherited from its parent

Note: Some browsers like chrome provide user the option to set font-size for the browser. 
But if the font-size in the webpage has been defined using em the browser settings will not be effective.
So developer has more control on the font-size.

Note: when using em the font-size is calculated based on the font-size of the parent
Consider this case
<body style="font-size:16px">
  Start
  <div class="child-of-body" style="font-size:2em"> 
    Hello
    <div class="child-of-div-which-is-child-of-body" style="font-size:2em">
    Hi
    </div>
  </div>
</body>

Here the body has font-size of 16px
.child-of-body has font-size of 2em ie 32 px
.child-of-div-which-is-child-of-body has a font-size of 2em which will be 2 * 32px ie 64px

so if you dont want the font size of .child-of-div-which-is-child-of-body to be based on its parent
you can define its font size as 2rem then it will be 2 * 16x ie 32px

##################################
Viewport meta tag & Media Queries
###################################
 
The viewport meta tag is required to be able to adjust our site to the device viewport, 
with this we can give the browser instructions on how to control the page's dimensions and scaling.
Usage:
<meta name="viewport" content="width=device-width, initial-scale=1.0">
Key Attributes
> width: Sets the width of the viewport. You can set it to a specific number of pixels or use the special value device-width,
       which sets the width to the width of the device.
> initial-scale: Sets the initial zoom level when the page is first loaded.
> minimum-scale and maximum-scale: Set the minimum and maximum zoom level.
> user-scalable: Controls whether the user can zoom in and out. It can be set to yes or no.


Media queries on the other hand Media queries are a CSS feature that allows you to apply styles based on the characteristics of the device rendering the content,
such as its width, height, orientation, and resolution

Basic syntax 
@media (query) {
  /* CSS rules here */
}

Example
/* Mobile devices (up to 600px) */
@media (max-width: 600px) {
  body {
    background-color: lightblue;
  }
}

/* Tablets (601px to 900px) */
@media (min-width: 601px) and (max-width: 900px) {
  body {
    background-color: lightgreen;
  }
}

/* Desktops (901px and above) */
@media (min-width: 901px) {
  body {
    background-color: lightgoldenrodyellow;
  }
}


############################################
General notes around css used in MM-FRONTEND
############################################
> body element
--------------
<body> is also a block element with default margin of 8px;


> DSM classes for 100% width and height
-----------------------------------
width-100
height-100

> display property
------------------
block  - means one on top of the other
inline - all in one line
inline-block - like a block but all in one line

> styling router-link
---------------------
To remove underline, use text-decoration: auto

To style use router-link-active class
.router-link-active {
    color: var(--mm-color--p700);
}

> Defining variable in scss
----------------------------
$mm-section-width: 210px;

usage:
max-width: $mm-section-width;

> Defining variable in css
---------------------------

The variable name should start with `--` and to make it accessible throughout project it should be defined in :root
:root {
  --primary-color: #ff0000;
}
usage:
color: var(--primary-color);

> To prevent text from overflow the container
---------------------------------------------
overflow-wrap: break-word;


> Using line-height with display flex
-------------------------------------
https://www.perplexity.ai/search/line-height-in-.x0OuPrLQHGHkj_QEb2jYQ?s=c

line height is applied to the flex items within the flex container. 
The line-height property sets the height of a line box,
commonly used to set the distance between lines of text

> Using <p> vs <span>
----------------------
use p when you have multiple lines or you want to give vertical spacing between content
user span for inline purpose and unlike <p> it does not add vertical space by default 

> <img> object-fit
------------------
The object-fit property in CSS is used to specify how an img or video element should be resized to fit its container

> display flex and position absolute
--------------------------------------
when parent has {display: flex} and child has {position: absolute}
it allows the child to be positioned within the parent element using the top, right, bottom, and left properties


> Scss @extend
---------------
If you want to reuse some styles and dont want to repeat them
then define them once in a class and then use 

.newClass {
  @extend <className>
}

Example

// Define a base style
.base-style {
  color: blue;
  font-size: 16px;
}

// Extend the base style to another selector
.extended-style {
  @extend .base-style;
  font-weight: bold;
}

// Apply styles to elements using the extended style
.my-element {
  @extend .extended-style;
  border: 1px solid black;
}


